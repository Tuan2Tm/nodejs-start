1. SETUP VPS
2. SETUP moi truong code + nghien cuu docker
3. Clone project + start project bang pm2
4. SETUP CICD === Using SSH and pm2
  1 - Tạo file .gitlab-ci.yml
    stages:
      - pull
      - build
      - deploy

    before_script:
      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - echo "StrictHostKeyChecking no" >> ~/.ssh/config

    pull:
      stage: pull
      script:
        - echo "Pulling latest code..."
        - ssh stackops@192.168.1.3 -p 234 "cd /home/stackops/next-app && git pull"

    build:
      stage: build
      script:
        - echo "Building the project..."
        - ssh stackops@192.168.1.3 -p 234 'source ~/.nvm/nvm.sh && cd /home/stackops/next-app && yarn install && yarn build'

    deploy:
      stage: deploy
      script:
        - echo "Deploying to production..."
        - ssh stackops@192.168.1.3 -p 234 'source ~/.nvm/nvm.sh && cd /home/stackops/next-app && pm2 reload all'

  2 - Chuẩn bị VPS làm GitLab Runner
    Cấu hình: 4vCPU 8GB Ram

    Cập nhật hệ thống và cài đặt các phụ thuộc cần thiết:

    sudo apt-get update
    sudo apt-get install -y curl openssh-server ca-certificates

    Thêm repository chính thức của GitLab Runner và cài đặt:
    curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash
    sudo apt-get install gitlab-runner

    Stop khi đăng ký: sudo gitlab-runner stop

    Start khi đăng ký: sudo gitlab-runner start

  3 - Tạo GitLab Runner
    Truy cập GitLab → Admin Area → CI/CD → Runners

    Chọn New instance runner → Tích Run untagged jobs
    Đăng ký theo lệnh được hướng dẫn.

  4 -  Tạo ssh-keygen RSA PEM
    ssh-keygen -t rsa -b 4096 -m PEM -C "your_email@example.com"

    Chuẩn Bị Khóa SSH
    Trước hết, đảm bảo khóa riêng tư của bạn không có passphrase. Nếu khóa có passphrase, bạn sẽ cần loại bỏ nó hoặc sử dụng ssh-agent để quản lý khóa.
    Sao chép nội dung của khóa riêng tư (ví dụ: nội dung trong file ~/.ssh/id_rsa).
    Thêm Khóa vào GitLab CI/CD Variables
    Truy cập vào GitLab, mở dự án của bạn.
    Đi đến Settings > CI / CD và tìm đến phần Variables.
    Tạo một biến mới với Key là SSH_PRIVATE_KEY. Trong phần Value, dán toàn bộ nội dung khóa SSH của bạn vào đây. Đảm bảo bạn đã dán đúng, bao gồm cả -----BEGIN RSA PRIVATE KEY----- và -----END RSA PRIVATE KEY-----.
    Có thể bạn sẽ cần phải chuyển đổi xuống dòng sang \n để biến được nhận diện đúng cách trong một số trường hợp. Tuy nhiên, hãy thử không chuyển đổi trước và chỉ thực hiện bước này nếu bạn gặp lỗi.
    Đối với máy chủ chứa source code, thêm Public Key vào ~/.ssh/authorized_keys

  5 - Cấu hình SSH tại máy chủ chứa code

    Đối với máy chủ chứa source code, thêm Public Key vào ~/.ssh/authorized_keys

    Config sshd: sudo nano /etc/ssh/sshd_config
    Đảm bảo các dòng sau mở:
    PubkeyAuthentication yes
    AuthorizedKeysFile .ssh/authorized_keys

    Restart sshd: sudo systemctl restart sshd

** tuong lua

sudo ufw status

sudo ufw allow 'Nginx Full'

5. Nginx configuration

  Để cấu hình Nginx và SSL cho domain của bạn và trỏ ứng dụng từ cổng 3000 tới http và https, bạn cần làm theo các bước sau:

  Bước 1: Cài đặt Nginx
    Trước tiên, bạn cần cài đặt Nginx (nếu bạn chưa cài). Sử dụng command sau để cài Nginx:

    sudo apt update
    sudo apt install nginx

  Bước 2: Cấu hình Nginx
    Sau đó, cấu hình Nginx để reverse proxy tới ứng dụng của bạn. Tạo một file cấu hình mới trong thư mục `/etc/nginx/sites-available/`:

    sudo nano /etc/nginx/sites-available/api-form

    Dán nội dung sau vào file cấu hình:

    server {
        listen 80;
        server_name api-form.phenikaa-x.com;

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    Lưu và đóng file bằng cách nhấn `Ctrl + X`, sau đó nhấn `Y` và `Enter`.

    Tiếp theo, kích hoạt cấu hình bằng cách tạo một liên kết đến file cấu hình từ thư mục `/etc/nginx/sites-enabled/`:

    sudo ln -s /etc/nginx/sites-available/api-form /etc/nginx/sites-enabled/


    Cuối cùng, kiểm tra xem cấu hình Nginx có lỗi hay không và khởi động lại dịch vụ:

    sudo nginx -t
    sudo systemctl restart nginx

  Bước 3: Cài đặt và Cấu hình Let's Encrypt
    Sau cùng, bạn cần cài đặt và cấu hình SSL cho trang web của bạn sử dụng Let's Encrypt. Bạn có thể sử dụng Certbot, một công cụ giúp cài đặt và gia hạn chứng chỉ SSL một cách tự động.
    sudo apt install certbot python3-certbot-nginx

    Sau khi cài đặt thành công, bạn có thể tạo chứng chỉ SSL cho tên miền của mình:
    sudo certbot --nginx -d api-form.phenikaa-x.com

    Certbot sẽ hướng dẫn bạn qua quá trình cài đặt. Khi được hỏi, chọn để nó tự động cấu hình Nginx cho bạn để bật HTTPS.
    Bây giờ, trình duyệt web sẽ hiển thị một khóa bên cạnh URL, xác nhận rằng trang web của bạn đang được bảo mật với SSL.
    Nếu bạn muốn kiểm tra cấu hình SSL của bạn, bạn có thể sử dụng công cụ như [SSL Labs' SSL Server Test](https://www.ssllabs.com/ssltest/).
    Lưu ý: Đảm bảo rằng cổng 80 và 443 trên máy chủ của bạn không bị chặn bởi bất kỳ tường lửa nào.


================================================================
-- start server: pm2 start ecosystem.config.js --no-daemon

* deploy fe

1. Clone project
2. Install dependency
3. Build project
4. Run project with yarn start
5. pm2 start --name={tag} yarn -- start || start fe pm2
6. pm2 serve dist port --name={tag}

pm2 save
pm2 startup

coppy cau lenh dong cuoi || Cái này sẽ tạo một đơn vị systemd giúp PM2 chạy trên user của bạn mỗi khi khởi động. Để kiểm tra trạng thái của đơn vị systemd mới tạo, sử dụng câu lệnh dưới

================================================================

setup connect mongodb

  + connect vps
  + sudo nano /etc/mongod.conf
    . update bindIp to 0.0.0.0
    . security: authorization: enabled
  + create user root
    . db.createUser({
        user: "admin-hdm",
        pwd: "Ph3nikaaX",
        roles: [ { role: "readWrite", db: "HDMap" } ]
      })
    ** roles:
      read: Chỉ có quyền đọc dữ liệu
      readWrite: Có quyền đọc và ghi dữ liệu.
      userAdmin: Có quyền quản lý user cho cơ sở dữ liệu này.
      dbOwner: là quyền quản lý toàn bộ cơ sở dữ liệu my_database

  + sudo systemctl restart mongod
  + mongo -u "root" -p "your_password_here" --authenticationDatabase "admin"
